generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String?
  googleId      String?        @unique
  name          String?
  picture       String?
  role          String         @default("user")  // "user" ou "admin"
  subscriptions Subscription[]
  favoritos     Favorito[]     // Relação inversa
}

model Plan {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Decimal        @db.Decimal(10, 2)
  duration     Int            // Duração em dias
  features     String[]
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id               Int       @id @default(autoincrement())
  type             String
  startDate        DateTime
  endDate          DateTime
  status           Boolean
  userId           Int
  planId           Int?
  paymentMethod    String?
  paymentStatus    String?
  nextPaymentDate  DateTime?
  canceledAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  plan             Plan?     @relation(fields: [planId], references: [id])
  payments         Payment[]
}

model Payment {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  amount         Decimal      @db.Decimal(10, 2)
  status         String
  paymentMethod  String
  transactionId  String?
  paymentDate    DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Component {
  id          Int      @id @default(autoincrement())
  name        String
  cssContent  String
  htmlContent String?
  category    String   @default("Outros")
  color       String   @default("#6366F1")
  favoritos   Favorito[] // Relação inversa
}

model Setting {
  id        Int      @id @default(autoincrement())
  section   String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([section, key])
}
model Favorito {
  id          String   @id @default(uuid())
  userId      Int
  componentId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  component  Component @relation(fields: [componentId], references: [id])
}