generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String?
  googleId      String?        @unique
  name          String?
  picture       String?
  role          String         @default("user")  // "user" ou "admin"
  lastLogin     DateTime?
  createdAt     DateTime       @default(now())
  subscriptions Subscription[]
  favoritos     Favorito[]     // Relação inversa
  componentViews ComponentView[]
}

model Plan {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Decimal        @db.Decimal(10, 2)
  durationDays Int            // Duração em dias
  features     String?        // Recursos como texto JSON
  isActive     Boolean        @default(true)
  discount     Int?           // Desconto em porcentagem (0-100)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id               Int       @id @default(autoincrement())
  startDate        DateTime
  endDate          DateTime
  status           String    @default("ACTIVE") // ACTIVE, CANCELLED, EXPIRED, PENDING
  userId           Int
  planId           Int
  cancelDate       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  plan             Plan      @relation(fields: [planId], references: [id])
  payments         Payment[]
}

model Payment {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  amount         Decimal      @db.Decimal(10, 2)
  status         String
  paymentMethod  String
  transactionId  String?
  paymentDate    DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Component {
  id          Int      @id @default(autoincrement())
  name        String
  cssContent  String
  htmlContent String?
  category    String   @default("Outros")
  color       String   @default("#6366F1")
  favoritos   Favorito[] // Relação inversa
  views       ComponentView[]
}

model Setting {
  id        Int      @id @default(autoincrement())
  section   String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([section, key])
}
model Favorito {
  id          String    @id @default(uuid())
  userId      Int
  componentId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  component   Component @relation(fields: [componentId], references: [id])

  @@unique([userId, componentId])
}

model Statistics {
  id                Int       @id @default(autoincrement())
  date              DateTime  @default(now())
  componentViews    Json?     // Contagem de visualizações por componente {componentId: count}
  pageViews         Json?     // Contagem de visualizações por página {pagePath: count}
  newUsers          Int       @default(0)
  activeUsers       Int       @default(0)
  totalSubscriptions Int      @default(0)
  revenue           Decimal   @default(0) @db.Decimal(10, 2)
  mostViewedComponents Json?  // Lista ordenada de componentes mais vistos
  mostFavoritedComponents Json? // Lista ordenada de componentes mais favoritados
  conversionRate    Decimal?  @db.Decimal(5, 2) // Taxa de conversão (%)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ComponentView {
  id          Int       @id @default(autoincrement())
  componentId Int
  userId      Int?
  sessionId   String?
  timestamp   DateTime  @default(now())
  component   Component @relation(fields: [componentId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}